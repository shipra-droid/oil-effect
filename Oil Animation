<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Junto Oil Orb Network</title>
  <style>
    html, body {
      margin: 0;
      padding: 0;
      height: 100%;
      background: #000;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    canvas {
      display: block;
    }
  </style>
</head>
<body>
  <canvas id="orb"></canvas>
  <script>
    const canvas = document.getElementById("orb");
    const ctx = canvas.getContext("2d");
    let w, h;
    function resize() {
      w = canvas.width = window.innerWidth;
      h = canvas.height = window.innerHeight;
    }
    window.addEventListener("resize", resize);
    resize();

    let t = 0;
    const nodes = [];

    // Generate random nodes inside circle
    const nodeCount = 12;
    function initNodes(cx, cy, radius) {
      nodes.length = 0;
      for (let i = 0; i < nodeCount; i++) {
        const angle = Math.random() * Math.PI * 2;
        const r = Math.random() * radius * 0.7;
        nodes.push({
          x: cx + Math.cos(angle) * r,
          y: cy + Math.sin(angle) * r,
          dx: (Math.random() - 0.5) * 0.3,
          dy: (Math.random() - 0.5) * 0.3
        });
      }
    }

    function draw() {
      ctx.clearRect(0, 0, w, h);

      const cx = w / 2;
      const cy = h / 2;
      const radius = Math.min(w, h) / 3;

      if (!nodes.length) initNodes(cx, cy, radius);

      // Clip circle
      ctx.save();
      ctx.beginPath();
      ctx.arc(cx, cy, radius, 0, Math.PI * 2);
      ctx.clip();

      // Oil spill gradient animation
      for (let i = 0; i < 30; i++) {
        const angle = (t / 50 + i) * 0.3;
        const x = cx + Math.sin(angle) * radius * 0.8;
        const y = cy + Math.cos(angle * 1.2) * radius * 0.8;

        const grad = ctx.createRadialGradient(x, y, 10, x, y, radius);
        grad.addColorStop(0, `hsla(${200 + (i * 12) % 100}, 100%, 50%, 0.25)`);
        grad.addColorStop(1, "transparent");

        ctx.fillStyle = grad;
        ctx.fillRect(cx - radius, cy - radius, radius * 2, radius * 2);
      }

      // Network nodes + connecting lines
      ctx.strokeStyle = "rgba(180, 100, 255, 0.6)";
      ctx.lineWidth = 1.5;
      for (let i = 0; i < nodes.length; i++) {
        for (let j = i + 1; j < nodes.length; j++) {
          const dx = nodes[i].x - nodes[j].x;
          const dy = nodes[i].y - nodes[j].y;
          const dist = Math.sqrt(dx * dx + dy * dy);
          if (dist < radius * 0.6) {
            ctx.beginPath();
            ctx.moveTo(nodes[i].x, nodes[i].y);
            ctx.lineTo(nodes[j].x, nodes[j].y);
            ctx.stroke();
          }
        }
      }

      // Draw nodes as glowing dots
      for (let n of nodes) {
        ctx.beginPath();
        ctx.arc(n.x, n.y, 4, 0, Math.PI * 2);
        ctx.fillStyle = "rgba(0, 255, 255, 0.9)";
        ctx.shadowBlur = 15;
        ctx.shadowColor = "violet";
        ctx.fill();

        // Move nodes a bit
        n.x += n.dx;
        n.y += n.dy;
        if (Math.hypot(n.x - cx, n.y - cy) > radius * 0.7) {
          n.dx *= -1;
          n.dy *= -1;
        }
      }

      ctx.restore();

      // Outer glow ring
      ctx.beginPath();
      ctx.arc(cx, cy, radius, 0, Math.PI * 2);
      ctx.strokeStyle = "rgba(120, 0, 255, 0.7)";
      ctx.lineWidth = 6;
      ctx.shadowBlur = 30;
      ctx.shadowColor = "cyan";
      ctx.stroke();

      t += 1;
      requestAnimationFrame(draw);
    }
    draw();
  </script>
</body>
</html>
